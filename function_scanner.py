#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FACE1 Projesi Fonksiyon TarayÄ±cÄ±
--------------------------------

Bu betik, FACE1 projesi iÃ§indeki tÃ¼m Python dosyalarÄ±nÄ± tarayarak fonksiyonlarÄ± Ã§Ä±karÄ±r ve
bir markdown dosyasÄ±na kaydeder.

Ã‡Ä±ktÄ± formatÄ±:
- Fonksiyon adÄ±
- BulunduÄŸu dosya
- Versiyon bilgisi (varsa)
- DeÄŸiÅŸtirilme tarihi (git log kullanarak)
- Ä°ÅŸlevi ve amacÄ± (docstring'den Ã§Ä±karÄ±lÄ±r)

KullanÄ±m:
    python function_scanner.py

OluÅŸturulan dosya:
    function_list.md
"""

import os
import re
import ast
import subprocess
from datetime import datetime
import logging

# Loglama ayarlarÄ±
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("function_scanner")

# Proje kÃ¶k dizini
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Ã‡Ä±ktÄ± dosyasÄ±
OUTPUT_FILE = os.path.join(PROJECT_ROOT, "function_list.md")

# Taranacak dizinler
SCAN_DIRS = [
    os.path.join(PROJECT_ROOT, "src"),
    os.path.join(PROJECT_ROOT, "include"),
    os.path.join(PROJECT_ROOT, "utils"),
]

# Ä°stisna klasÃ¶rler (taranmayacak)
EXCLUDE_DIRS = [
    "__pycache__",
    "venv",
    ".git",
]

# Ä°stisna dosyalar (taranmayacak)
EXCLUDE_FILES = [
    "__init__.py",
]


def get_git_last_modified_date(file_path):
    """Git log kullanarak bir dosyanÄ±n son deÄŸiÅŸtirilme tarihini alÄ±r."""
    try:
        result = subprocess.run(
            ["git", "log", "-1", "--format=%ad", "--date=short", "--", file_path],
            capture_output=True,
            text=True,
            check=False,
        )
        if result.stdout.strip():
            return result.stdout.strip()
    except (subprocess.SubprocessError, FileNotFoundError):
        pass
    
    # Git bilgisi alÄ±namazsa dosya deÄŸiÅŸtirilme tarihini kullan
    try:
        mtime = os.path.getmtime(file_path)
        return datetime.fromtimestamp(mtime).strftime('%Y-%m-%d')
    except (IOError, OSError):
        return "Bilinmiyor"


def extract_version_from_docstring(docstring):
    """Docstring iÃ§inden versiyon bilgisini Ã§Ä±karÄ±r."""
    if not docstring:
        return "BelirtilmemiÅŸ"
    
    # Versiyon desenlerini ara
    version_patterns = [
        r"Versiyon\s*:\s*([0-9]+\.[0-9]+\.[0-9]+)",
        r"Version\s*:\s*([0-9]+\.[0-9]+\.[0-9]+)",
        r"v([0-9]+\.[0-9]+\.[0-9]+)",
    ]
    
    for pattern in version_patterns:
        match = re.search(pattern, docstring, re.IGNORECASE)
        if match:
            return match.group(1)
    
    # DeÄŸiÅŸiklik kayÄ±tlarÄ±nÄ± kontrol et
    changelog_patterns = [
        r"\[([0-9]+\.[0-9]+\.[0-9]+)\]",
    ]
    
    for pattern in changelog_patterns:
        match = re.search(pattern, docstring, re.IGNORECASE)
        if match:
            return match.group(1)
    
    return "BelirtilmemiÅŸ"


def extract_purpose_from_docstring(docstring):
    """Docstring iÃ§inden fonksiyonun amacÄ±nÄ± Ã§Ä±karÄ±r."""
    if not docstring:
        return "BelirtilmemiÅŸ"
    
    # Docstring'i temizle ve ilk cÃ¼mleyi veya paragrafÄ± al
    lines = docstring.split("\n")
    clean_lines = [line.strip() for line in lines if line.strip()]
    
    if not clean_lines:
        return "BelirtilmemiÅŸ"
    
    # Ä°lk anlamlÄ± satÄ±rÄ± al
    purpose = clean_lines[0]
    
    # BazÄ± temizleme iÅŸlemleri
    purpose = purpose.replace('"""', '').replace("'''", '').strip()
    
    # Maksimum 100 karakter
    if len(purpose) > 100:
        purpose = purpose[:97] + "..."
    
    return purpose


def parse_python_file(file_path):
    """Python dosyasÄ±nÄ± ayrÄ±ÅŸtÄ±rarak fonksiyonlarÄ± ve sÄ±nÄ±flarÄ± Ã§Ä±karÄ±r."""
    functions = []
    
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # AST (Abstract Syntax Tree) ile dosyayÄ± ayrÄ±ÅŸtÄ±r
        try:
            tree = ast.parse(content)
        except SyntaxError as e:
            logger.error(f"SÃ¶z dizimi hatasÄ±: {file_path} - {e}")
            return []
        
        # DosyanÄ±n son deÄŸiÅŸtirilme tarihini al
        last_modified = get_git_last_modified_date(file_path)
        
        # Dosya yolunu gÃ¶receli hale getir
        rel_path = os.path.relpath(file_path, PROJECT_ROOT)
        
        # ModÃ¼l dÃ¼zeyindeki fonksiyonlarÄ± iÅŸle
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                # Fonksiyon bilgilerini Ã§Ä±kar
                name = node.name
                docstring = ast.get_docstring(node) or ""
                version = extract_version_from_docstring(docstring)
                purpose = extract_purpose_from_docstring(docstring)
                
                # SonuÃ§larÄ± ekle
                functions.append({
                    "name": name,
                    "file_path": rel_path,
                    "version": version,
                    "modified_date": last_modified,
                    "purpose": purpose,
                    "type": "function"
                })
            
            # SÄ±nÄ±flarÄ± ve metotlarÄ± iÅŸle
            elif isinstance(node, ast.ClassDef):
                class_name = node.name
                class_docstring = ast.get_docstring(node) or ""
                
                # SÄ±nÄ±fÄ±n kendisini ekle
                functions.append({
                    "name": class_name,
                    "file_path": rel_path,
                    "version": extract_version_from_docstring(class_docstring),
                    "modified_date": last_modified,
                    "purpose": extract_purpose_from_docstring(class_docstring),
                    "type": "class"
                })
                
                # SÄ±nÄ±fÄ±n metotlarÄ±nÄ± iÅŸle
                for class_node in node.body:
                    if isinstance(class_node, ast.FunctionDef):
                        method_name = class_node.name
                        method_docstring = ast.get_docstring(class_node) or ""
                        
                        functions.append({
                            "name": f"{class_name}.{method_name}",
                            "file_path": rel_path,
                            "version": extract_version_from_docstring(method_docstring),
                            "modified_date": last_modified,
                            "purpose": extract_purpose_from_docstring(method_docstring),
                            "type": "method"
                        })
        
        return functions
    
    except Exception as e:
        logger.error(f"Dosya iÅŸlenirken hata: {file_path} - {e}")
        return []


def generate_markdown(functions):
    """Fonksiyon listesinden markdown Ã§Ä±ktÄ±sÄ± oluÅŸturur"""
    markdown = "# FACE1 Projesi Fonksiyon Listesi\n\n"
    markdown += "Bu liste, FACE1 projesi iÃ§indeki tÃ¼m fonksiyon ve sÄ±nÄ±flarÄ± iÃ§erir.\n\n"
    markdown += "OluÅŸturulma Tarihi: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "\n\n"
    markdown += "| Fonksiyon | BulunduÄŸu Dosya | Versiyon | DeÄŸiÅŸtirme Tarihi | Ä°ÅŸlevi ve AmacÄ± |\n"
    markdown += "|-----------|----------------|----------|-------------------|----------------|\n"
    
    # FonksiyonlarÄ± dosya yoluna gÃ¶re gruplandÄ±r
    functions_by_file = {}
    for func in functions:
        if func["file_path"] not in functions_by_file:
            functions_by_file[func["file_path"]] = []
        functions_by_file[func["file_path"]].append(func)
    
    # Her dosya iÃ§in fonksiyonlarÄ± sÄ±rala ve ekle
    for file_path in sorted(functions_by_file.keys()):
        for func in sorted(functions_by_file[file_path], key=lambda x: x["name"]):
            name_with_prefix = func["name"]
            if func["type"] == "class":
                name_with_prefix = f"ðŸ”¶ {name_with_prefix}"  # SÄ±nÄ±flar iÃ§in emoji
            elif func["type"] == "method":
                name_with_prefix = f"â†ª {name_with_prefix}"   # Metotlar iÃ§in emoji
            
            markdown += f"| `{name_with_prefix}` | {func['file_path']} | {func['version']} | {func['modified_date']} | {func['purpose']} |\n"
    
    return markdown


def scan_directory(directory):
    """Belirtilen dizini ve alt dizinlerini tarayarak Python dosyalarÄ±nÄ± bulur."""
    all_functions = []
    
    for root, dirs, files in os.walk(directory):
        # Ä°stisna klasÃ¶rleri atla
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        
        for file in files:
            # Sadece Python dosyalarÄ±nÄ± al ve istisnalarÄ± atla
            if file.endswith(".py") and file not in EXCLUDE_FILES:
                file_path = os.path.join(root, file)
                logger.info(f"Ä°ÅŸleniyor: {file_path}")
                functions = parse_python_file(file_path)
                all_functions.extend(functions)
    
    return all_functions


def main():
    """Ana fonksiyon."""
    logger.info("FACE1 Fonksiyon TarayÄ±cÄ± baÅŸlatÄ±lÄ±yor...")
    
    all_functions = []
    
    # Belirtilen dizinleri tara
    for directory in SCAN_DIRS:
        if os.path.exists(directory):
            logger.info(f"Dizin taranÄ±yor: {directory}")
            functions = scan_directory(directory)
            all_functions.extend(functions)
        else:
            logger.warning(f"Dizin bulunamadÄ±: {directory}")
    
    # KÃ¶k dizindeki Python dosyalarÄ±nÄ± tara
    root_py_files = [f for f in os.listdir(PROJECT_ROOT) 
                     if f.endswith(".py") and f not in EXCLUDE_FILES]
    
    for file in root_py_files:
        file_path = os.path.join(PROJECT_ROOT, file)
        logger.info(f"Ä°ÅŸleniyor: {file_path}")
        functions = parse_python_file(file_path)
        all_functions.extend(functions)
    
    # Toplam sayÄ±yÄ± gÃ¼nlÃ¼ÄŸe kaydet
    logger.info(f"Toplam {len(all_functions)} fonksiyon/metot bulundu")
    
    # Markdown oluÅŸtur ve dosyaya kaydet
    markdown = generate_markdown(all_functions)
    
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(markdown)
    
    logger.info(f"Fonksiyon listesi oluÅŸturuldu: {OUTPUT_FILE}")


if __name__ == "__main__":
    main()